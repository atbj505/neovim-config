snippet /* "A JSDoc comment" b
/**
 * ${1:${VISUAL}}$0
 */
endsnippet

snippet @au "@author email (First Last)"
@author ${1:`!v g:snips_author`} [${2:`!v g:snips_author_email`}]
endsnippet

snippet @li "@license Description"
@license ${1:MIT}$0
endsnippet

snippet @ver "@version Semantic version"
@version ${1:0.1.0}$0
endsnippet

snippet @fileo "@fileoverview Description" b
/**
 * @fileoverview ${1:${VISUAL:A description of the file}}$0
 */
endsnippet

snippet @constr "@constructor"
@constructor
endsnippet

snippet @p "@param {Type} varname Description"
@param {${1:Type}} ${2:varname} ${3:Description}
endsnippet

snippet @ret "@return {Type} Description"
@return {${1:Type}} ${2:Description}
endsnippet

snippet @pri "@private"
@private
endsnippet

snippet @over "@override"
@override
endsnippet

snippet @pro "@protected"
@protected
endsnippet

# for loop
snippet for
for (let ${2:i} = 0; $2 < ${1:arr.length}; $2 += 1) {
  $0
}
endsnippet

# promise
snippet	retpro
return new Promise((resolve, reject) => {
  $0
});
endsnippet

# range函数
snippet	range
function range(m, n) {
  return Array(n - m + 1).fill().map((x, i) => m + i);
}
$0
endsnippet

snippet retj
return reject({ $0 });
endsnippet

snippet retv "description"
return resolve({ $0 });
endsnippet

snippet retres "description"
return res.status($1).json({ $0 });
endsnippet

snippet logi "description"
logger.info($0);
endsnippet

snippet loge "description"
logger.error($0);
endsnippet

snippet logd "description"
logger.debug($0);
endsnippet
