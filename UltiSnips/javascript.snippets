snippet /* "A JSDoc comment" b
/**
 * ${1:${VISUAL}}$0
 */
endsnippet

snippet @au "@author email (First Last)"
@author ${1:`!v g:snips_author`} [${2:`!v g:snips_author_email`}]
endsnippet

snippet @li "@license Description"
@license ${1:MIT}$0
endsnippet

snippet @ver "@version Semantic version"
@version ${1:0.1.0}$0
endsnippet

snippet @fileo "@fileoverview Description" b
/**
 * @fileoverview ${1:${VISUAL:A description of the file}}$0
 */
endsnippet

snippet @constr "@constructor"
@constructor
endsnippet

snippet @p "@param {Type} varname Description"
@param {${1:Type}} ${2:varname} ${3:Description}
endsnippet

snippet @ret "@return {Type} Description"
@return {${1:Type}} ${2:Description}
endsnippet

snippet @pri "@private"
@private
endsnippet

snippet @over "@override"
@override
endsnippet

snippet @pro "@protected"
@protected
endsnippet

# for loop
snippet for
for (let ${2:i} = 0; $2 < ${1:arr.length}; $2 += 1) {
  $0
}
endsnippet

# promise
snippet	retpro "return new Promse"
return new Promise((resolve, reject) => {
  $0
})
endsnippet

# range函数
snippet	range "range(m, n)"
function range(m, n) {
  return Array(n - m + 1).fill().map((x, i) => m + i)
}
$0
endsnippet

snippet retj "return reject"
return reject({ $0 })
endsnippet

snippet retv "return resolve"
return resolve({ $0 })
endsnippet

snippet retres "return res.status.json"
return res.json({ $0 })
endsnippet

snippet logi "logger.info"
logger.info($0)
endsnippet

snippet loge "logger.error"
logger.error($0)
endsnippet

snippet logd "logger.debug"
logger.debug($0)
endsnippet

snippet req "require('model')"
require('$0')
endsnippet

snippet reqpr "require(path.resolve(''))"
require(path.resolve('$0'))
endsnippet

snippet con "const = "
const ${1} = ${0}
endsnippet

snippet jsons "JSON.stringify"
JSON.stringify(${1})${0}
endsnippet

snippet jsonp "JSON.parse"
JSON.parse(${1})${0}
endsnippet

snippet each "[].forEach"
${1:array}.forEach((${2:el}) => {
  ${0}
})
endsnippet

snippet map "[].map"
${1:array}.map((${2:el}) => ${0})
endsnippet

snippet filter "[].filter"
${1:array}.filter(${2:el} => ${0})
endsnippet

snippet reduce "[].reduce"
${1:array}.reduce((${2:pre}, ${3:cur}) => ${0})
endsnippet

snippet cl "console.log"
console.log(${0})
endsnippet

snippet ex "module.export"
module.exports${1} = ${0}
endsnippet

snippet imm "import {} from ''"
import { ${1} } from '${0}'
endsnippet

snippet im "import {} from ''"
import ${1} from '${0}'
endsnippet

snippet /** "function description"
/**
 * ${1:Description}
 * @param (${2}) ${3:param}
 * @return (${4}) ${5:return}
 */
endsnippet

snippet ret "return"
return ${0}
endsnippet

snippet retps "return Promise.resolve"
return Promise.resolve(${0})
endsnippet

snippet retpj "return Promise.reject"
return Promise.reject(${0})
endsnippet
