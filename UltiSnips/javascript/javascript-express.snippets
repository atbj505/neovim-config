snippet express_restapi "express REST api"
module.exports.get = (req, res) => {
  return res.json({ success: 'get' })
}

module.exports.del = (req, res) => {
  return res.json({ success: 'del' })
}

module.exports.put = (req, res) => {
  return res.json({ success: 'put' })
}

module.exports.post = (req, res) => {
  return res.json({ success: 'post' })
}
endsnippet

snippet express_draft "express draft"
const express = require('express')
const morgan = require('morgan')
const compression = require('compression')
const path = require('path')

const logger = require('./utils')
const config = require(path.resolve('./config.js'))

const app = express()
const port = config.app.port

app.use(compression())

logger.stream = {
  write: function (message, encoding) {
    logger.info(message)
  }
}

app.use(morgan('combined', { stream: logger.stream }))
app.use(express.static(path.resolve('./dist')))

app.get('/', (req, res) => {
  res.sendFile('/index.html')
})

// global error handler

app.use((error, req, res, next) => {
  logger.error(error.stack)
  const statusCode = error.statusCode || 500
  const err = {
    error: statusCode,
    message: error.message
  }
  if (!res.headersSent) {
    res.status(statusCode).send(err)
  }
  next()
})

app.listen(port, () => {
  logger.info(`Node app is running on http://localhost:${port}`)
})

process.on('unhandledRejection', (reason) => {
  logger.error('Reason: ', reason)
})

module.exports = app
endsnippet

snippet logger_draft "winston logger draft"
const winston = require('winston')
const tsFormat = () => (new Date()).toLocaleString()
const logFile = ${0:app.log}

function buildLoggerConfig (config) {
  const loggerConfig = Object.assign({}, config)
  loggerConfig.transports = []
  if (process.env.NODE_ENV === 'production') {
    loggerConfig.transports.push(new winston.transports['File'](config.transports.File))
  }
  loggerConfig.transports.push(new winston.transports['Console'](config.transports.Console))
  return loggerConfig
}

const loggerConfig = {
  transports: {
    Console: {
      level: 'debug',
      handleExceptions: true,
      json: false,
      colorize: true,
      timestamp: tsFormat
    },
    File: {
      filename: logFile,
      timestamp: tsFormat,
      json: false,
      level: 'info'
    }
  },
  exitOnError: false
}

module.exports = new winston.Logger(buildLoggerConfig(loggerConfig))
endsnippet
